<?xml version="1.0"?>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:pu="http://schema.phpunit.de/coverage/1.0" lang="en"><head><title>phpDox - Source of Route.php</title><link rel="stylesheet" type="text/css" href="../../css/style.css" media="screen"/><link rel="stylesheet" href="../../css/source.css"/><meta http-equiv="content-type" content="text/html; charset=utf-8"/></head><body><nav class="topnav"><ul><li><div class="logo"><span>/**</span>phpDox</div></li><li class="separator"><a href="../../index.xhtml">Overview</a></li><li class="separator"><a href="../../namespaces.xhtml">Namespaces</a></li><li><a href="../../interfaces.xhtml">Interfaces</a></li><li><a href="../../classes.xhtml">Classes</a></li><li class="separator"><a href="../../source/index.xhtml">Source</a></li></ul></nav><div id="mainstage"><div class="box"><ul class="breadcrumb"><li><a href="../../index.xhtml">Overview</a></li><li class="separator"><a href="../../source/index.xhtml">Source</a></li></ul></div><h1>Source of file Route.php</h1><p>
                        Size: 4,684 Bytes - Last Modified: 2015-06-20T23:58:17+00:00</p><section><h2><small>/home/gui/workspace/pi-services/src/Pi/</small>Route.php</h2><table class="source"><tr><td class="no"><a class="anker" href="#line1">1</a><a class="anker" href="#line2">2</a><a class="anker" href="#line3">3</a><a class="anker" href="#line4">4</a><a class="anker" href="#line5">5</a><a class="anker" href="#line6">6</a><a class="anker" href="#line7">7</a><a class="anker" href="#line8">8</a><a class="anker" href="#line9">9</a><a class="anker" href="#line10">10</a><a class="anker" href="#line11">11</a><a class="anker" href="#line12">12</a><a class="anker" href="#line13">13</a><a class="anker" href="#line14">14</a><a class="anker" href="#line15">15</a><a class="anker" href="#line16">16</a><a class="anker" href="#line17">17</a><a class="anker" href="#line18">18</a><a class="anker" href="#line19">19</a><a class="anker" href="#line20">20</a><a class="anker" href="#line21">21</a><a class="anker" href="#line22">22</a><a class="anker" href="#line23">23</a><a class="anker" href="#line24">24</a><a class="anker" href="#line25">25</a><a class="anker" href="#line26">26</a><a class="anker" href="#line27">27</a><a class="anker" href="#line28">28</a><a class="anker" href="#line29">29</a><a class="anker" href="#line30">30</a><a class="anker" href="#line31">31</a><a class="anker" href="#line32">32</a><a class="anker" href="#line33">33</a><a class="anker" href="#line34">34</a><a class="anker" href="#line35">35</a><a class="anker" href="#line36">36</a><a class="anker" href="#line37">37</a><a class="anker" href="#line38">38</a><a class="anker" href="#line39">39</a><a class="anker" href="#line40">40</a><a class="anker" href="#line41">41</a><a class="anker" href="#line42">42</a><a class="anker" href="#line43">43</a><a class="anker" href="#line44">44</a><a class="anker" href="#line45">45</a><a class="anker" href="#line46">46</a><a class="anker" href="#line47">47</a><a class="anker" href="#line48">48</a><a class="anker" href="#line49">49</a><a class="anker" href="#line50">50</a><a class="anker" href="#line51">51</a><a class="anker" href="#line52">52</a><a class="anker" href="#line53">53</a><a class="anker" href="#line54">54</a><a class="anker" href="#line55">55</a><a class="anker" href="#line56">56</a><a class="anker" href="#line57">57</a><a class="anker" href="#line58">58</a><a class="anker" href="#line59">59</a><a class="anker" href="#line60">60</a><a class="anker" href="#line61">61</a><a class="anker" href="#line62">62</a><a class="anker" href="#line63">63</a><a class="anker" href="#line64">64</a><a class="anker" href="#line65">65</a><a class="anker" href="#line66">66</a><a class="anker" href="#line67">67</a><a class="anker" href="#line68">68</a><a class="anker" href="#line69">69</a><a class="anker" href="#line70">70</a><a class="anker" href="#line71">71</a><a class="anker" href="#line72">72</a><a class="anker" href="#line73">73</a><a class="anker" href="#line74">74</a><a class="anker" href="#line75">75</a><a class="anker" href="#line76">76</a><a class="anker" href="#line77">77</a><a class="anker" href="#line78">78</a><a class="anker" href="#line79">79</a><a class="anker" href="#line80">80</a><a class="anker" href="#line81">81</a><a class="anker" href="#line82">82</a><a class="anker" href="#line83">83</a><a class="anker" href="#line84">84</a><a class="anker" href="#line85">85</a><a class="anker" href="#line86">86</a><a class="anker" href="#line87">87</a><a class="anker" href="#line88">88</a><a class="anker" href="#line89">89</a><a class="anker" href="#line90">90</a><a class="anker" href="#line91">91</a><a class="anker" href="#line92">92</a><a class="anker" href="#line93">93</a><a class="anker" href="#line94">94</a><a class="anker" href="#line95">95</a><a class="anker" href="#line96">96</a><a class="anker" href="#line97">97</a><a class="anker" href="#line98">98</a><a class="anker" href="#line99">99</a><a class="anker" href="#line100">100</a><a class="anker" href="#line101">101</a><a class="anker" href="#line102">102</a><a class="anker" href="#line103">103</a><a class="anker" href="#line104">104</a><a class="anker" href="#line105">105</a><a class="anker" href="#line106">106</a><a class="anker" href="#line107">107</a><a class="anker" href="#line108">108</a><a class="anker" href="#line109">109</a><a class="anker" href="#line110">110</a><a class="anker" href="#line111">111</a><a class="anker" href="#line112">112</a><a class="anker" href="#line113">113</a><a class="anker" href="#line114">114</a><a class="anker" href="#line115">115</a><a class="anker" href="#line116">116</a><a class="anker" href="#line117">117</a><a class="anker" href="#line118">118</a><a class="anker" href="#line119">119</a><a class="anker" href="#line120">120</a><a class="anker" href="#line121">121</a><a class="anker" href="#line122">122</a><a class="anker" href="#line123">123</a><a class="anker" href="#line124">124</a><a class="anker" href="#line125">125</a><a class="anker" href="#line126">126</a><a class="anker" href="#line127">127</a><a class="anker" href="#line128">128</a><a class="anker" href="#line129">129</a><a class="anker" href="#line130">130</a><a class="anker" href="#line131">131</a><a class="anker" href="#line132">132</a><a class="anker" href="#line133">133</a><a class="anker" href="#line134">134</a><a class="anker" href="#line135">135</a><a class="anker" href="#line136">136</a><a class="anker" href="#line137">137</a><a class="anker" href="#line138">138</a><a class="anker" href="#line139">139</a><a class="anker" href="#line140">140</a><a class="anker" href="#line141">141</a><a class="anker" href="#line142">142</a><a class="anker" href="#line143">143</a><a class="anker" href="#line144">144</a><a class="anker" href="#line145">145</a><a class="anker" href="#line146">146</a><a class="anker" href="#line147">147</a><a class="anker" href="#line148">148</a><a class="anker" href="#line149">149</a><a class="anker" href="#line150">150</a><a class="anker" href="#line151">151</a><a class="anker" href="#line152">152</a><a class="anker" href="#line153">153</a><a class="anker" href="#line154">154</a><a class="anker" href="#line155">155</a><a class="anker" href="#line156">156</a><a class="anker" href="#line157">157</a><a class="anker" href="#line158">158</a><a class="anker" href="#line159">159</a><a class="anker" href="#line160">160</a><a class="anker" href="#line161">161</a><a class="anker" href="#line162">162</a><a class="anker" href="#line163">163</a><a class="anker" href="#line164">164</a><a class="anker" href="#line165">165</a><a class="anker" href="#line166">166</a><a class="anker" href="#line167">167</a><a class="anker" href="#line168">168</a><a class="anker" href="#line169">169</a><a class="anker" href="#line170">170</a><a class="anker" href="#line171">171</a><a class="anker" href="#line172">172</a><a class="anker" href="#line173">173</a><a class="anker" href="#line174">174</a><a class="anker" href="#line175">175</a><a class="anker" href="#line176">176</a><a class="anker" href="#line177">177</a><a class="anker" href="#line178">178</a><a class="anker" href="#line179">179</a><a class="anker" href="#line180">180</a><a class="anker" href="#line181">181</a><a class="anker" href="#line182">182</a><a class="anker" href="#line183">183</a><a class="anker" href="#line184">184</a><a class="anker" href="#line185">185</a><a class="anker" href="#line186">186</a><a class="anker" href="#line187">187</a><a class="anker" href="#line188">188</a><a class="anker" href="#line189">189</a><a class="anker" href="#line190">190</a><a class="anker" href="#line191">191</a><a class="anker" href="#line192">192</a><a class="anker" href="#line193">193</a><a class="anker" href="#line194">194</a><a class="anker" href="#line195">195</a><a class="anker" href="#line196">196</a><a class="anker" href="#line197">197</a><a class="anker" href="#line198">198</a></td><td class="line"><div id="line1"><pre><span class="token T_INLINE_HTML">&lt;?</span></pre></div><div id="line2"><br/></div><div id="line3"><pre><span class="token T_INLINE_HTML">namespace Pi;</span></pre></div><div id="line4"><br/></div><div id="line5"><pre><span class="token T_INLINE_HTML">/**</span></pre></div><div id="line6"><pre><span class="token T_INLINE_HTML"> * The Route is managed by the ServicecRoute</span></pre></div><div id="line7"><pre><span class="token T_INLINE_HTML"> * The routes have the necessary information to associate an Uri to a Request type</span></pre></div><div id="line8"><pre><span class="token T_INLINE_HTML"> * They arent needed for message queue services resolve the operation</span></pre></div><div id="line9"><pre><span class="token T_INLINE_HTML"> */</span></pre></div><div id="line10"><pre><span class="token T_INLINE_HTML">class Route {</span></pre></div><div id="line11"><pre><span class="token T_INLINE_HTML">  /**</span></pre></div><div id="line12"><pre><span class="token T_INLINE_HTML">   * The callable function for service method</span></pre></div><div id="line13"><pre><span class="token T_INLINE_HTML">   */</span></pre></div><div id="line14"><pre><span class="token T_INLINE_HTML">  protected $callable;</span></pre></div><div id="line15"><br/></div><div id="line16"><pre><span class="token T_INLINE_HTML">  /**</span></pre></div><div id="line17"><pre><span class="token T_INLINE_HTML">   * Arguments to be invoked with callable</span></pre></div><div id="line18"><pre><span class="token T_INLINE_HTML">   */</span></pre></div><div id="line19"><pre><span class="token T_INLINE_HTML">  protected $args;</span></pre></div><div id="line20"><br/></div><div id="line21"><pre><span class="token T_INLINE_HTML">  /**</span></pre></div><div id="line22"><pre><span class="token T_INLINE_HTML">   * Parameters from url pattern</span></pre></div><div id="line23"><pre><span class="token T_INLINE_HTML">   */</span></pre></div><div id="line24"><pre><span class="token T_INLINE_HTML">  public $params;</span></pre></div><div id="line25"><br/></div><div id="line26"><pre><span class="token T_INLINE_HTML">  protected $conditions;</span></pre></div><div id="line27"><br/></div><div id="line28"><pre><span class="token T_INLINE_HTML">  protected static $defaultConditions = array();</span></pre></div><div id="line29"><br/></div><div id="line30"><pre><span class="token T_INLINE_HTML">  protected $paramNames = array();</span></pre></div><div id="line31"><br/></div><div id="line32"><pre><span class="token T_INLINE_HTML">  protected $paramNamesPath;</span></pre></div><div id="line33"><br/></div><div id="line34"><pre><span class="token T_INLINE_HTML">  protected $perVerb = array();</span></pre></div><div id="line35"><br/></div><div id="line36"><pre><span class="token T_INLINE_HTML">  public function __construct(</span></pre></div><div id="line37"><pre><span class="token T_INLINE_HTML">    protected $pattern,</span></pre></div><div id="line38"><pre><span class="token T_INLINE_HTML">    protected $serviceType,</span></pre></div><div id="line39"><pre><span class="token T_INLINE_HTML">    protected $requestType,</span></pre></div><div id="line40"><pre><span class="token T_INLINE_HTML">    protected $caseSensitive = false,</span></pre></div><div id="line41"><pre><span class="token T_INLINE_HTML">    protected array $verbs = null)</span></pre></div><div id="line42"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line43"><pre><span class="token T_INLINE_HTML">    if(is_null($verbs)){</span></pre></div><div id="line44"><pre><span class="token T_INLINE_HTML">      $this-&gt;fverbs = array('GET');</span></pre></div><div id="line45"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line46"><br/></div><div id="line47"><br/></div><div id="line48"><pre><span class="token T_INLINE_HTML">    foreach($verbs as $verb){</span></pre></div><div id="line49"><pre><span class="token T_INLINE_HTML">      $this-&gt;perVerb[strtoupper($verb)] = $pattern;</span></pre></div><div id="line50"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line51"><br/></div><div id="line52"><pre><span class="token T_INLINE_HTML">    $this-&gt;setConditions(self::getDefaultConditions());</span></pre></div><div id="line53"><pre><span class="token T_INLINE_HTML">    $this-&gt;params = array();</span></pre></div><div id="line54"><br/></div><div id="line55"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line56"><pre><span class="token T_INLINE_HTML">  public static function getDefaultConditions()</span></pre></div><div id="line57"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line58"><pre><span class="token T_INLINE_HTML">      return self::$defaultConditions;</span></pre></div><div id="line59"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line60"><pre><span class="token T_INLINE_HTML">  public function setConditions(array $conditions)</span></pre></div><div id="line61"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line62"><pre><span class="token T_INLINE_HTML">      $this-&gt;conditions = $conditions;</span></pre></div><div id="line63"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line64"><br/></div><div id="line65"><pre><span class="token T_INLINE_HTML">  public function setPattern($pattern)</span></pre></div><div id="line66"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line67"><pre><span class="token T_INLINE_HTML">      $this-&gt;pattern = $pattern;</span></pre></div><div id="line68"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line69"><br/></div><div id="line70"><pre><span class="token T_INLINE_HTML">  public function serviceType()</span></pre></div><div id="line71"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line72"><pre><span class="token T_INLINE_HTML">    return $this-&gt;serviceType;</span></pre></div><div id="line73"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line74"><br/></div><div id="line75"><pre><span class="token T_INLINE_HTML">  public function requestType(){</span></pre></div><div id="line76"><pre><span class="token T_INLINE_HTML">    return $this-&gt;requestType;</span></pre></div><div id="line77"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line78"><br/></div><div id="line79"><pre><span class="token T_INLINE_HTML">  public function params()</span></pre></div><div id="line80"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line81"><pre><span class="token T_INLINE_HTML">    return $this-&gt;params;</span></pre></div><div id="line82"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line83"><br/></div><div id="line84"><pre><span class="token T_INLINE_HTML">  public function paramNames()</span></pre></div><div id="line85"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line86"><pre><span class="token T_INLINE_HTML">    return $this-&gt;paramNames;</span></pre></div><div id="line87"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line88"><br/></div><div id="line89"><pre><span class="token T_INLINE_HTML">  /**</span></pre></div><div id="line90"><pre><span class="token T_INLINE_HTML">   * Convert a URL parameter (e.g. ":id", ":id+") into a regular expression</span></pre></div><div id="line91"><pre><span class="token T_INLINE_HTML">   * @param  array $m URL parameters</span></pre></div><div id="line92"><pre><span class="token T_INLINE_HTML">   * @return string       Regular expression for URL parameter</span></pre></div><div id="line93"><pre><span class="token T_INLINE_HTML">   */</span></pre></div><div id="line94"><pre><span class="token T_INLINE_HTML">  protected function matchesCallback($m)</span></pre></div><div id="line95"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line96"><pre><span class="token T_INLINE_HTML">    </span></pre></div><div id="line97"><pre><span class="token T_INLINE_HTML">      $this-&gt;paramNames[] = $m[1];</span></pre></div><div id="line98"><pre><span class="token T_INLINE_HTML">      if (isset($this-&gt;conditions[$m[1]])) {</span></pre></div><div id="line99"><pre><span class="token T_INLINE_HTML">          return '(?P&lt;' . $m[1] . '&gt;' . $this-&gt;conditions[$m[1]] . ')';</span></pre></div><div id="line100"><pre><span class="token T_INLINE_HTML">      }</span></pre></div><div id="line101"><pre><span class="token T_INLINE_HTML">      if (substr($m[0], -1) === '+') {</span></pre></div><div id="line102"><pre><span class="token T_INLINE_HTML">          $this-&gt;paramNamesPath[$m[1]] = 1;</span></pre></div><div id="line103"><br/></div><div id="line104"><pre><span class="token T_INLINE_HTML">          return '(?P&lt;' . $m[1] . '&gt;.+)';</span></pre></div><div id="line105"><pre><span class="token T_INLINE_HTML">      }</span></pre></div><div id="line106"><br/></div><div id="line107"><pre><span class="token T_INLINE_HTML">      return '(?P&lt;' . $m[1] . '&gt;[^/]+)';</span></pre></div><div id="line108"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line109"><br/></div><div id="line110"><pre><span class="token T_INLINE_HTML">  /**</span></pre></div><div id="line111"><pre><span class="token T_INLINE_HTML">   * Matches URI?</span></pre></div><div id="line112"><pre><span class="token T_INLINE_HTML">   *</span></pre></div><div id="line113"><pre><span class="token T_INLINE_HTML">   * Parse this route's pattern, and then compare it to an HTTP resource URI</span></pre></div><div id="line114"><pre><span class="token T_INLINE_HTML">   * This method was modeled after the techniques demonstrated by Dan Sosedoff at:</span></pre></div><div id="line115"><pre><span class="token T_INLINE_HTML">   *</span></pre></div><div id="line116"><pre><span class="token T_INLINE_HTML">   * http://blog.sosedoff.com/2009/09/20/rails-like-php-url-router/</span></pre></div><div id="line117"><pre><span class="token T_INLINE_HTML">   * https://gist.github.com/zeuxisoo/1241844#file-route-php</span></pre></div><div id="line118"><pre><span class="token T_INLINE_HTML">   *</span></pre></div><div id="line119"><pre><span class="token T_INLINE_HTML">   * @param  string $resourceUri A Request URI</span></pre></div><div id="line120"><pre><span class="token T_INLINE_HTML">   * @return bool</span></pre></div><div id="line121"><pre><span class="token T_INLINE_HTML">   */</span></pre></div><div id="line122"><pre><span class="token T_INLINE_HTML">  public function matches($resourceUri, $verb = null)</span></pre></div><div id="line123"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line124"><pre><span class="token T_INLINE_HTML">    if(is_null($verb)){</span></pre></div><div id="line125"><pre><span class="token T_INLINE_HTML">      $verb = 'GET';</span></pre></div><div id="line126"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line127"><pre><span class="token T_INLINE_HTML">    </span></pre></div><div id="line128"><pre><span class="token T_INLINE_HTML">    $exists = false;</span></pre></div><div id="line129"><pre><span class="token T_INLINE_HTML">    foreach($this-&gt;perVerb as $key =&gt; $value){</span></pre></div><div id="line130"><pre><span class="token T_INLINE_HTML">      if($key == $verb &amp;&amp; $this-&gt;checkMatches($value, $resourceUri)){</span></pre></div><div id="line131"><pre><span class="token T_INLINE_HTML">        $exists = true;</span></pre></div><div id="line132"><pre><span class="token T_INLINE_HTML">        continue;</span></pre></div><div id="line133"><br/></div><div id="line134"><pre><span class="token T_INLINE_HTML">      }</span></pre></div><div id="line135"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line136"><pre><span class="token T_INLINE_HTML">    return $exists;</span></pre></div><div id="line137"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line138"><br/></div><div id="line139"><pre><span class="token T_INLINE_HTML">  private function checkMatches($pattern, $resourceUri)</span></pre></div><div id="line140"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line141"><pre><span class="token T_INLINE_HTML">    //Convert URL params into regex patterns, construct a regex for this route, init params</span></pre></div><div id="line142"><pre><span class="token T_INLINE_HTML">    $patternAsRegex = preg_replace_callback(</span></pre></div><div id="line143"><pre><span class="token T_INLINE_HTML">        '#:([\w]+)\+?#',</span></pre></div><div id="line144"><pre><span class="token T_INLINE_HTML">        array($this, 'matchesCallback'),</span></pre></div><div id="line145"><pre><span class="token T_INLINE_HTML">        str_replace(')', ')?', (string)$pattern)</span></pre></div><div id="line146"><pre><span class="token T_INLINE_HTML">    );</span></pre></div><div id="line147"><pre><span class="token T_INLINE_HTML">    if (substr($this-&gt;pattern, -1) === '/') {</span></pre></div><div id="line148"><pre><span class="token T_INLINE_HTML">        $patternAsRegex .= '?';</span></pre></div><div id="line149"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line150"><br/></div><div id="line151"><pre><span class="token T_INLINE_HTML">    $regex = '#^' . $patternAsRegex . '$#';</span></pre></div><div id="line152"><br/></div><div id="line153"><pre><span class="token T_INLINE_HTML">    if ($this-&gt;caseSensitive === false) {</span></pre></div><div id="line154"><pre><span class="token T_INLINE_HTML">        $regex .= 'i';</span></pre></div><div id="line155"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line156"><br/></div><div id="line157"><pre><span class="token T_INLINE_HTML">    //Cache URL params' names and values if this route matches the current HTTP request</span></pre></div><div id="line158"><pre><span class="token T_INLINE_HTML">    if (!preg_match($regex, $resourceUri, $paramValues)) {</span></pre></div><div id="line159"><pre><span class="token T_INLINE_HTML">        return false;</span></pre></div><div id="line160"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line161"><pre><span class="token T_INLINE_HTML">    foreach ($this-&gt;paramNames as $name) {</span></pre></div><div id="line162"><pre><span class="token T_INLINE_HTML">        if (isset($paramValues[$name])) {</span></pre></div><div id="line163"><pre><span class="token T_INLINE_HTML">            if (isset($this-&gt;paramNamesPath[$name])) {</span></pre></div><div id="line164"><pre><span class="token T_INLINE_HTML">                $this-&gt;params[$name] = explode('/', urldecode($paramValues[$name]));</span></pre></div><div id="line165"><pre><span class="token T_INLINE_HTML">            } else {</span></pre></div><div id="line166"><pre><span class="token T_INLINE_HTML">                $this-&gt;params[$name] = urldecode($paramValues[$name]);</span></pre></div><div id="line167"><pre><span class="token T_INLINE_HTML">            }</span></pre></div><div id="line168"><br/></div><div id="line169"><pre><span class="token T_INLINE_HTML">        }</span></pre></div><div id="line170"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line171"><br/></div><div id="line172"><pre><span class="token T_INLINE_HTML">    return true;</span></pre></div><div id="line173"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line174"><br/></div><div id="line175"><br/></div><div id="line176"><pre><span class="token T_INLINE_HTML">  public function setCallable($callable)</span></pre></div><div id="line177"><pre><span class="token T_INLINE_HTML">  {</span></pre></div><div id="line178"><pre><span class="token T_INLINE_HTML">    $matches = array();</span></pre></div><div id="line179"><pre><span class="token T_INLINE_HTML">    if (is_string($callable) &amp;&amp; preg_match('!^([^\:]+)\:([a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*)$!', $callable, $matches)) {</span></pre></div><div id="line180"><pre><span class="token T_INLINE_HTML">        $class = $matches[1];</span></pre></div><div id="line181"><pre><span class="token T_INLINE_HTML">        $method = $matches[2];</span></pre></div><div id="line182"><pre><span class="token T_INLINE_HTML">        $callable = function() use ($class, $method) {</span></pre></div><div id="line183"><pre><span class="token T_INLINE_HTML">            static $obj = null;</span></pre></div><div id="line184"><pre><span class="token T_INLINE_HTML">            if ($obj === null) {</span></pre></div><div id="line185"><pre><span class="token T_INLINE_HTML">                $obj = new $class;</span></pre></div><div id="line186"><pre><span class="token T_INLINE_HTML">            }</span></pre></div><div id="line187"><pre><span class="token T_INLINE_HTML">            return call_user_func_array(array($obj, $method), func_get_args());</span></pre></div><div id="line188"><pre><span class="token T_INLINE_HTML">        };</span></pre></div><div id="line189"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line190"><br/></div><div id="line191"><pre><span class="token T_INLINE_HTML">    if (!is_callable($callable)) {</span></pre></div><div id="line192"><pre><span class="token T_INLINE_HTML">        throw new \InvalidArgumentException('Route callable must be callable');</span></pre></div><div id="line193"><pre><span class="token T_INLINE_HTML">    }</span></pre></div><div id="line194"><br/></div><div id="line195"><pre><span class="token T_INLINE_HTML">    $this-&gt;callable = $callable;</span></pre></div><div id="line196"><pre><span class="token T_INLINE_HTML">  }</span></pre></div><div id="line197"><pre><span class="token T_INLINE_HTML">}</span></pre></div><div id="line198"><br/></div></td></tr></table></section></div><footer><span>Generated using phpDox 0.8.0 - Copyright (C) 2010 - 2015 by Arne Blankerts</span></footer></body></html>
